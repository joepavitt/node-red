name: Update Issue Status
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
jobs:
    mark_under_review:
      if: ${{ !github.event.pull_request.draft }}
      permissions: write-all
      name: "Update Issue: Under Review"
      runs-on: ubuntu-latest
      steps:
        - name: Get Linked Issues
          id: get_linked_issues
          env:
            GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}
            PR_ID: ${{ github.event.pull_request.node_id }}
          run: |
            echo "GH_TOKEN:"
            echo "$GH_TOKEN"
            echo "PR_ID:"
            echo "$PR_ID"
            linked_issues="$( gh api graphql -f query='
              query(
                $pr: ID!
              ) {
                node(id: $pr) {
                  ... on PullRequest {
                    closingIssuesReferences(first:5, userLinkedOnly:false) {
                      totalCount
                      nodes { 
                        id
                        projectItems (first:5) {
                          nodes {
                            id
                            project {
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }' -f pr=$PR_ID --jq '.data.node.closingIssuesReferences.nodes')"
            echo "ISSUE IDs:"
            echo "$linked_issues"
            echo "LINKED_ISSUE_IDs=$linked_issues" >> $GITHUB_ENV
        - name: Update Status to "Under Review"
          env:
            GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}
            PROJECT_ID: PVT_kwHOBepif84AfH1x
            STATUS_FIELD_ID: PVTSSF_lAHOBepif84AfH1xzgUjmnw
            UNDER_REVIEW_OPTION_ID: 5fce39d2
          run: |
            item_ids=$(echo '${{ env.LINKED_ISSUE_IDs }}' | jq '.[] | .projectItems.nodes[] | select(.project.id == "${{ env.PROJECT_ID }}") | .id')
            echo item_ids:            
            echo $item_ids            
            echo while loop:            
            echo while read -r ISSUE_ITEM_ID; do
              echo "ISSUE_ITEM_ID=$ISSUE_ITEM_ID"
              updatedAt="$( gh api graphql -f query='
              mutation($itemId:ID!, $projectId:ID!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId,
                    fieldId: "${{ env.STATUS_FIELD_ID }}",
                    itemId: $itemId,
                    value: {
                      singleSelectOptionId: "${{ env.UNDER_REVIEW_OPTION_ID }}"
                    }
                  }
                ) {
                  projectV2Item {
                    type
                    updatedAt
                  }
                }
              }' -f itemId=$ISSUE_ITEM_ID -f projectId=$PROJECT_ID  --jq '.data.updateProjectV2ItemFieldValue.projectV2Item.updatedAt')"
              echo "updatedAt=$updatedAt"
            done <<< "$item_ids"